{"id":991710455,"question_id":1039,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1689068897,"status":10,"status_display":"Accepted","runtime":"821 ms","url":"/submissions/detail/991710455/","is_pending":"Not Pending","title":"Find the Town Judge","memory":"22.8 MB","code":"class Solution:\n  def findJudge(self, n: int, trust: list[list[int]]) -> int:\n    # decalare\n    trustMap = {}\n    numOfTrusts = {}\n    \n    for i in range(1, n + 1):\n      trustMap[i] = []\n      numOfTrusts[i] = 0\n    \n    # the trusted people of a person\n    for person, trusts in trust:\n      trustMap[person].append(trusts)\n    original = trustMap.copy()\n      \n    visited = set()\n    def dfs(person: int):\n      if person in visited or trustMap[person] == []:\n        return\n      \n      visited.add(person)\n      \n      for trusts in trustMap[person]:\n        dfs(trusts)\n        numOfTrusts[trusts] += 1\n        \n      visited.remove(person)\n      trustMap[person] = []\n      \n    for person in trustMap:\n      dfs(person)\n    \n    for person, value in numOfTrusts.items():\n      if value == n-1 and original[person] == []:\n        return person\n\n    # return\n    return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-town-judge","has_notes":false,"flag_type":1}