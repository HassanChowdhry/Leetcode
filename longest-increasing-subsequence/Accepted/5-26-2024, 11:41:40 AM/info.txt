{"id":1268768461,"question_id":300,"lang":"python3","lang_name":"Python3","time":"1Â month, 3Â weeks","timestamp":1716748900,"status":10,"status_display":"Accepted","runtime":"2998 ms","url":"/submissions/detail/1268768461/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"19.4 MB","code":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n\n        # edge case\n        if not nums:\n            return 0\n\n        # declare\n        result = 0\n        cache = {}\n\n        # backtrack - logic\n        def backtrack(start: int) -> int:\n\n            # base case\n            if start == len(nums):\n                return 0\n\n            # cache - check\n            if start in cache:\n                return cache.get(start)\n\n            # recurse\n            max_increasing = 1\n            for i in range(start+1, len(nums)):\n                if nums[i] <= nums[start]:\n                    continue\n                max_increasing = max(max_increasing, 1 + backtrack(i))\n\n            # cache\n            cache[start] = max_increasing\n\n            # return\n            return max_increasing\n\n        # backtrack - call\n        for start in range(len(nums)):\n            result = max(result, backtrack(start))\n\n        # return\n        return result","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}