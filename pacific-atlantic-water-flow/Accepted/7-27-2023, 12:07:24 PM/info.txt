{"id":1005601142,"question_id":417,"lang":"python3","lang_name":"Python3","time":"11 months, 3 weeks","timestamp":1690484844,"status":10,"status_display":"Accepted","runtime":"237 ms","url":"/submissions/detail/1005601142/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"18 MB","code":"# https://leetcode.com/problems/pacific-atlantic-water-flow/\n\nclass Solution:\n    def pacificAtlantic(self, heights: list[list[int]]) -> list[list[int]]:\n           # declare\n      ROWS, COLS = len(heights), len(heights[0])\n      ans = []\n      pacific = set()\n      atlantic = set()\n      \n      # logic\n      def bfs(i, j, visit):\n        queue = deque()\n        queue.append((i, j))\n        \n        while queue:\n          r, c = queue.popleft()\n          \n          for x, y in [(r, c), (r, c-1), (r, c+1), (r+1, c), (r-1, c)]: # goes right, down, left, up\n            if (x, y) not in visit and x >= 0 and y >= 0 and x < ROWS and y < COLS and heights[x][y] >= heights[r][c]:\n             queue.append((x, y))\n             visit.add((x, y))\n      \n      # Main Loop\n      for c in range(COLS):\n        bfs(0, c, pacific)\n        bfs(ROWS-1, c, atlantic)\n        \n      for r in range(ROWS):\n        bfs(r, 0, pacific)\n        bfs(r, COLS-1, atlantic)\n      \n      # return\n      return list(pacific.intersection(atlantic))","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow","has_notes":false,"flag_type":1}