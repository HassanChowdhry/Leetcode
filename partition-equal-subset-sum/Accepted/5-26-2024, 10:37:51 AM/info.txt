{"id":1268717085,"question_id":416,"lang":"python3","lang_name":"Python3","time":"1Â month, 3Â weeks","timestamp":1716745071,"status":10,"status_display":"Accepted","runtime":"1326 ms","url":"/submissions/detail/1268717085/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"150.5 MB","code":"from collections import defaultdict\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        if sum(nums) % 2:\n            return False\n        dp = defaultdict(set)\n        dp[0].add(nums[0])\n        \n        for i, num in enumerate(nums):\n            if i == 0: continue\n\n            children = dp[i-1]\n            for child in children:\n                sub = child-num\n                add = child+num\n                if i==len(nums)-1 and (sub == 0 or add == 0):\n                    return True\n\n                dp[i].add(sub)\n                dp[i].add(add)\n\n        return False\n\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-equal-subset-sum","has_notes":false,"flag_type":1}