{"id":1211109701,"question_id":39,"lang":"python3","lang_name":"Python3","time":"3 months, 4 weeks","timestamp":1711133012,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/1211109701/","is_pending":"Not Pending","title":"Combination Sum","memory":"16.8 MB","code":"class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        result = []\n\n        def dfs(i, curr, total):\n            # If the total sum equals the target, we've found a valid combination\n            if total == target:\n                result.append(curr.copy())\n                return\n            # If the index is out of bounds or total sum exceeds the target, stop exploring this path\n            if i >= len(candidates) or total > target:\n                return\n\n            # Include the current candidate in the combination\n            curr.append(candidates[i])\n            # Explore further combinations with the current candidate\n            dfs(i, curr, total + candidates[i])\n            # Backtrack: remove the last candidate to explore combinations without it\n            curr.pop()\n            # Explore combinations without the current candidate\n            dfs(i + 1, curr, total)\n\n        # Start DFS traversal from index 0 with an empty current combination and total sum 0\n        dfs(0, [], 0)\n        return result","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}