{"id":1237480962,"question_id":39,"lang":"python3","lang_name":"Python3","time":"2 months, 4 weeks","timestamp":1713631821,"status":10,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/1237480962/","is_pending":"Not Pending","title":"Combination Sum","memory":"16.7 MB","code":"class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        # init variables\n        res = []\n        can_length = len(candidates)\n    \n        # inner funct to calc all paths\n        def backtrack(inner, total, curr_index):\n            if total > target:\n                return\n            if total == target:\n                res.append(inner.copy())\n                return\n\n            # update makes it that tree only looks forward\n            for i in range(curr_index, can_length):\n                num = candidates[i]\n                inner.append(num)\n                backtrack(inner, total+num, i)\n                inner.pop()\n        \n\n        \n        backtrack([], 0, 0)\n        # return\n        return res","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}