{"id":998557490,"question_id":208,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1689779915,"status":10,"status_display":"Accepted","runtime":"196 ms","url":"/submissions/detail/998557490/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"34.4 MB","code":"# https://leetcode.com/problems/implement-trie-prefix-tree/\n\nfrom collections import defaultdict\n\nclass TrieNode:\n  def __init__(self):\n    self.children = defaultdict(TrieNode)\n    self.endOfWord: bool = False\n  \nclass Trie:\n  def __init__(self):\n    self.root = TrieNode()\n  \n  # Time O(n), Space O(n)\n  def insert(self, word: str) -> None:\n    curr = self.root\n    \n    for c in word:\n      curr = curr.children[c]\n      \n    curr.endOfWord = True\n  \n  # Time O(n), Space O(1)\n  def search(self, word: str) -> bool:\n    curr = self.root\n    for c in word:\n      if c not in curr.children:\n        return False\n      \n      curr = curr.children[c]\n      \n    return curr.endOfWord\n      \n  # Time O(n), Space O(1)\n  def startsWith(self, prefix: str) -> bool:\n    curr = self.root\n    for c in prefix:\n      if c not in curr.children:\n        return False\n      \n      curr = curr.children[c]\n      \n    return True","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}