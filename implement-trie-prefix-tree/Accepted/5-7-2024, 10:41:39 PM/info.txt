{"id":1252375998,"question_id":208,"lang":"python3","lang_name":"Python3","time":"2 months, 1 week","timestamp":1715146899,"status":10,"status_display":"Accepted","runtime":"121 ms","url":"/submissions/detail/1252375998/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"31.5 MB","code":"from collections import defaultdict\nclass TrieNode:\n    def __init__(self):\n        self.children = defaultdict(TrieNode)\n        self.endOfWord = False\nclass Trie:\n\n    def __init__(self):\n        self.root = TrieNode()\n        \n\n    def insert(self, word: str) -> None:\n        curr = self.root\n\n        for c in word:\n            curr = curr.children[c]\n        \n        curr.endOfWord = True\n\n    def search(self, word: str) -> bool:\n\n        curr = self.root\n\n        for c in word:\n            if c not in curr.children:\n                return False\n            curr = curr.children[c]\n        \n        return curr.endOfWord\n\n    def startsWith(self, prefix: str) -> bool:\n        curr = self.root\n\n        for c in prefix:\n            if c not in curr.children:\n                return False\n            curr = curr.children[c]\n        \n        return True\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}