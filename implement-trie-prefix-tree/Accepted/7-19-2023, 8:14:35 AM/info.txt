{"id":998554560,"question_id":208,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1689779675,"status":10,"status_display":"Accepted","runtime":"202 ms","url":"/submissions/detail/998554560/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"33.9 MB","code":"# https://leetcode.com/problems/implement-trie-prefix-tree/\n\nclass TrieNode:\n  def __init__(self):\n    self.children = {}\n    self.endOfWord: bool = False\n  \nclass Trie:\n  def __init__(self):\n    self.root = TrieNode()\n      \n  def insert(self, word: str) -> None:\n    curr = self.root\n    \n    for i, c in enumerate(word):\n      if c not in curr.children:\n        curr.children[c] = TrieNode()\n      curr = curr.children[c]\n      \n      if i == len(word) - 1:\n        curr.endOfWord = True\n      \n  def search(self, word: str) -> bool:\n    curr = self.root\n    for i, c in enumerate(word):\n      if c not in curr.children:\n        return False\n      \n      curr = curr.children[c]\n      \n      if i == len(word) - 1 and not curr.endOfWord:\n        return False\n      \n    return True\n      \n\n  def startsWith(self, prefix: str) -> bool:\n    curr = self.root\n    for c in prefix:\n      if c not in curr.children:\n        return False\n      curr = curr.children[c]\n      \n    return True\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}