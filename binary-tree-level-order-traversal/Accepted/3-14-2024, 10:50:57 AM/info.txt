{"id":1203712911,"question_id":102,"lang":"python3","lang_name":"Python3","time":"4Â months","timestamp":1710438657,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1203712911/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"17.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if not root:\n            return []\n\n        res = []\n        queue = [root]\n\n        while len(queue) > 0:\n            length = len(queue)\n            level = []\n            for i in range(length):\n                curr_node = queue.pop(0)\n\n                if not curr_node:\n                    continue\n\n                level.append(curr_node.val)\n                if curr_node.left:\n                    queue.append(curr_node.left)\n\n                if curr_node.right:\n                    queue.append(curr_node.right)\n                \n            res.append(level)\n        \n        return res","compare_result":"11111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}