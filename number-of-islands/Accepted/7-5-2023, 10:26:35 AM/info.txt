{"id":987133177,"question_id":200,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1688577995,"status":10,"status_display":"Accepted","runtime":"363 ms","url":"/submissions/detail/987133177/","is_pending":"Not Pending","title":"Number of Islands","memory":"18.7 MB","code":"class Solution:\n            # BFS - Time O(mn), Space O(n)\n    def numIslands(self, grid: list[list[str]]) -> int:\n      count = 0\n      \n      # traverses whole matrix\n      for i in range(len(grid)):\n        for j in range(len(grid[i])):\n          # unvisited land\n          if grid[i][j] == '1':\n            self.bfs(grid, i, j)\n            count += 1\n      \n      return count\n    \n    # help from youtube for dir part\n    def bfs(self, grid: list[list[str]], i: int, j: int) -> None:\n      queue = [[i, j]]\n      directions = [0, 1, 0, -1, 0]\n      \n      while queue:\n        r, c = queue.pop(0)\n        for size in range(len(directions) - 1):\n          nr, nc = r + directions[size], c + directions[size + 1]\n          if self.inRange(grid, nr, nc) and grid[nr][nc] == '1':\n            queue.append([nr, nc])\n            grid[nr][nc] = 2\n    \n    def inRange(self, grid: list[list[str]], i: int, j: int):\n      return i >= 0 and j >= 0 and i < len(grid) and j < len(grid[i])","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}