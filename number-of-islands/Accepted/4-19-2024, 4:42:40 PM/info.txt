{"id":1236942992,"question_id":200,"lang":"python3","lang_name":"Python3","time":"2 months, 4 weeks","timestamp":1713570160,"status":10,"status_display":"Accepted","runtime":"296 ms","url":"/submissions/detail/1236942992/","is_pending":"Not Pending","title":"Number of Islands","memory":"18.9 MB","code":"class Solution:\n    # BFS - Time O(mn), Space O(n)\n    def numIslands(self, grid: list[list[str]]) -> int:\n      count = 0\n      \n      def bfs(i: int, j: int ) -> None:\n        # stores i, j in queue and list for direction change\n        queue = deque()\n        queue.append((i, j))\n        \n        while queue:\n          r, c = queue.popleft()\n          \n          for x, y in [(r, c-1), (r, c+1), (r+1, c), (r-1, c)]:\n            # goes right, down, left, up\n            if x in range(len(grid)) and y in range(len(grid[i])) and grid[x][y] == '1':\n              queue.append((x, y))\n              grid[x][y] = 2 # change to recognize as visited\n        \n      # traverses whole matrix\n      for i in range(len(grid)):\n        for j in range(len(grid[i])):\n          # unvisited land\n          if grid[i][j] == '1':\n            bfs(i, j)\n            count += 1\n      \n      return count","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}