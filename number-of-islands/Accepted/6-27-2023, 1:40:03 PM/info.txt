{"id":981140714,"question_id":200,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1687898403,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/981140714/","is_pending":"Not Pending","title":"Number of Islands","memory":"23.8 MB","code":"class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n      visited = set()\n      count = 0\n      \n      # traverses whole matrix\n      for i in range(len(grid)):\n        for j in range(len(grid[i])):\n          # unvisited land\n          if str(i) + '-' + str(j) not in visited and grid[i][j] == '1':\n            count += self.dfs(grid, visited, i, j)\n      \n      return count\n    \n    def dfs(self, grid, visited, i, j):\n      \n      # checks out of bounds, alr visited and water\n      if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[i]) or grid[i][j] == '0' or str(i) + '-' + str(j) in visited:\n            return 0\n\n      visited.add(str(i) + '-' + str(j))\n      \n      self.dfs(grid, visited, i, j + 1) # right\n      self.dfs(grid, visited, i + 1, j) # down\n\n      self.dfs(grid, visited, i, j - 1) # left\n      self.dfs(grid, visited, i - 1, j) # up\n\n      return 1","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}