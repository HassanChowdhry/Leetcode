{"id":981144291,"question_id":200,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1687898836,"status":10,"status_display":"Accepted","runtime":"479 ms","url":"/submissions/detail/981144291/","is_pending":"Not Pending","title":"Number of Islands","memory":"23.9 MB","code":"class Solution:\n    def numIslands(self, grid: list[list[str]]) -> int:\n      visited = set()\n      count = 0\n      \n      # traverses whole matrix\n      for i in range(len(grid)):\n        for j in range(len(grid[i])):\n          # unvisited land\n          if self.coordinate(i, j) not in visited and grid[i][j] == '1':\n            count += self.dfs(grid, visited, i, j)\n      \n      return count\n    \n    def dfs(self, grid: list[list[str]], visited: set, i: int, j: int) -> int:\n      \n      # checks out of bounds, alr visited and water\n      if not self.inRange(grid, i, j) or grid[i][j] == '0' or self.coordinate(i, j) in visited:\n            return 0\n\n      visited.add(self.coordinate(i, j))\n      \n      self.dfs(grid, visited, i, j + 1) # right\n      self.dfs(grid, visited, i + 1, j) # down\n\n      self.dfs(grid, visited, i, j - 1) # left\n      self.dfs(grid, visited, i - 1, j) # up\n\n      return 1\n    \n    def coordinate(self, i: int, j: int) -> str:\n      return str(i) + '-' + str(j)\n    \n    def inRange(self, grid, i, j):\n      return i >= 0 and j >= 0 and i < len(grid) and j < len(grid[i])","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}