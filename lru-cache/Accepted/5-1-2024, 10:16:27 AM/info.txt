{"id":1246726312,"question_id":146,"lang":"python3","lang_name":"Python3","time":"2 months, 2 weeks","timestamp":1714583787,"status":10,"status_display":"Accepted","runtime":"572 ms","url":"/submissions/detail/1246726312/","is_pending":"Not Pending","title":"LRU Cache","memory":"77.7 MB","code":"class Node:\n    def __init__(self, val, prev, next):\n        self.val = val\n        self.prev = prev\n        self.next = next\n\nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        self.capacity=capacity\n        self.head = None\n        self.tail = None\n        self.map = {} # store key: (value, pointer to node)\n\n    def get(self, key: int) -> int:\n        if key not in self.map:\n            return -1\n\n        curr_node = self.map[key][1]\n        \n        if curr_node != self.tail:\n            if curr_node == self.head:\n                self.head = self.head.next\n            else:\n                prev_node = curr_node.prev\n                next_node = curr_node.next\n                prev_node.next = next_node \n                if next_node:\n                    next_node.prev = prev_node \n            \n            curr_node.prev = self.tail\n            self.tail.next = curr_node\n            self.tail = curr_node\n            curr_node.next = None\n\n        return self.map[key][0]\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.map:\n            self.map[key][0] = value\n            self.get(key)\n            return\n        \n        if len(self.map) == self.capacity:\n            del self.map[self.head.val]\n            if self.head.next:\n                self.head = self.head.next\n                self.head.prev = None\n            else:\n                self.head = None\n                self.tail = None\n        \n        new_entry = Node(key, self.tail, None)\n        if not self.head:\n            self.head = new_entry\n        else:\n            self.tail.next = new_entry\n        self.tail = new_entry\n\n        self.map[key] = [value, new_entry]\n\n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}