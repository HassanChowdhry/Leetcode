{"id":630914480,"question_id":104,"lang":"javascript","lang_name":"JavaScript","time":"2 years, 5 months","timestamp":1643547246,"status":10,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/630914480/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"45.9 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n   let queue = []; \n  queue.push(root);\n\n  let maximumDepth = 0;\n\n  while (queue.length > 0) {\n    let size = queue.length;\n\n    for (let i = 0; i < size; i++) {\n      let node = queue.shift();\n      \n      if (!node) {\n        return 0;\n      }\n\n      if (node.left) {\n        queue.push(node.left);\n      }\n      \n      if (node.right) {\n        queue.push(node.right);\n      }\n    }\n    maximumDepth += 1;\n  }\n  return maximumDepth;\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree","has_notes":false,"flag_type":1}