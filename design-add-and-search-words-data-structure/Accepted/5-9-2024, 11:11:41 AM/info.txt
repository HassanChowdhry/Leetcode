{"id":1253813704,"question_id":211,"lang":"python3","lang_name":"Python3","time":"2 months, 1 week","timestamp":1715278301,"status":10,"status_display":"Accepted","runtime":"1468 ms","url":"/submissions/detail/1253813704/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"66.3 MB","code":"from collections import defaultdict\n\nclass TrieNode:\n    def __init__(self):\n        self.children = defaultdict(TrieNode)\n        self.end = False\n\nclass WordDictionary:\n\n    def __init__(self):\n        self.root = TrieNode()\n        \n    def addWord(self, word: str) -> None:\n        curr = self.root\n\n        for c in word:\n            curr = curr.children[c]\n        curr.end = True\n\n    def search(self, word: str) -> bool:\n        n = len(word)\n\n        def dfs(root, idx):\n            if idx>=n:\n                return root.end\n\n            c = word[idx]\n            if c != '.' and c not in root.children:\n                return False\n\n            take = False\n            if c in root.children:\n                take = take or dfs(root.children[c], idx+1)\n\n            elif c == '.':\n                for child in root.children:\n                    take = take or dfs(root.children[child], idx+1)\n            \n            return take # placeholder\n        \n        return dfs(self.root, 0) # placeholder\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}