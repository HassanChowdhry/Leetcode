{"id":1231455598,"question_id":155,"lang":"python3","lang_name":"Python3","time":"3Â months","timestamp":1713031577,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/1231455598/","is_pending":"Not Pending","title":"Min Stack","memory":"20.8 MB","code":"class MinStack:\n\n    # have a min with each push untill you push a num less than that even\n    # you might pop \n    def __init__(self):\n        self.stack =[]\n        self.min = float(\"inf\")\n        self.len = 0\n\n    def push(self, val: int) -> None:\n        self.min = min(val, self.min)\n        self.stack.append((val, self.min))\n        self.len += 1\n\n    def pop(self) -> None:\n        self.stack.pop()[0]\n        self.len -= 1\n        if self.len < 1:\n            self.min = float(\"inf\")\n        else: \n            self.min = self.stack[self.len-1][1]\n\n    def top(self) -> int:\n        return self.stack[self.len-1][0]\n        \n\n    def getMin(self) -> int:\n        return self.stack[self.len-1][1]\n\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","compare_result":"1111111111111111111111111111111","title_slug":"min-stack","has_notes":false,"flag_type":1}