{"id":1245100230,"question_id":138,"lang":"python3","lang_name":"Python3","time":"2 months, 2 weeks","timestamp":1714411271,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1245100230/","is_pending":"Not Pending","title":"Copy List with Random Pointer","memory":"17.4 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution:\n    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':\n        idx_map = {} # idx: new_node\n        t_map = {} # node: idx\n\n        curr = head\n        new_head = None\n        prev = None\n        idx = 0\n\n        # set new list without random and init hashmaps\n        while curr:\n            new_node = Node(curr.val, None, None)\n            if prev: prev.next = new_node\n            if idx == 0: new_head = new_node\n\n            idx_map[idx] = new_node\n            t_map[curr] = idx\n            prev = new_node\n            curr = curr.next\n            idx+=1\n\n        new_curr = new_head\n        curr = head\n        idx = 0\n\n        # find idx of random in old node and use that idx to find node in new map\n        while curr:\n            if curr.random:\n                ridx = t_map[curr.random]\n                new_curr.random = idx_map[ridx]\n            else:\n                new_curr.random = None\n\n            new_curr = new_curr.next\n            curr = curr.next\n\n        return new_head","compare_result":"1111111111111111111","title_slug":"copy-list-with-random-pointer","has_notes":false,"flag_type":1}