{"id":998487452,"question_id":130,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1689774174,"status":10,"status_display":"Accepted","runtime":"150 ms","url":"/submissions/detail/998487452/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"18.2 MB","code":"# https://leetcode.com/problems/surrounded-regions/\n\nfrom collections import deque\n\n\nclass Solution:\n  # Time O(), Space O()\n    def solve(self, board: list[list[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        # declare\n        visited = set()\n        ROWS = len(board)\n        COLS = len(board[0])\n        \n        # logic\n        def dfs(i: int, j: int):\n          if i < 0 or j < 0 or j >= COLS or i >= ROWS or board[i][j] == 'X' or (i, j) in visited:\n            return\n          \n          visited.add((i, j))\n          \n          dfs(i + 1, j)\n          dfs(i - 1, j)\n          dfs(i, j + 1)\n          dfs(i, j - 1)\n        \n        for i in range(ROWS):\n          for j in range(COLS):\n            if board[i][j] == 'O' and (i == 0 or j == 0 or i == ROWS - 1 or j == COLS - 1 ):\n              dfs(i, j)\n              \n        for i in range(ROWS):\n          for j in range(COLS):\n            if board[i][j] == 'O' and (i, j) not in visited:\n              board[i][j] = 'X'","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions","has_notes":false,"flag_type":1}