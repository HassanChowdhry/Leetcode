{"id":1297463457,"question_id":1549,"lang":"python3","lang_name":"Python3","time":"3Â weeks, 4Â days","timestamp":1719123542,"status":10,"status_display":"Accepted","runtime":"646 ms","url":"/submissions/detail/1297463457/","is_pending":"Not Pending","title":"Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit","memory":"35.9 MB","code":"from collections import deque\nfrom heapq import heapify, heappop, heappush\nclass Solution:\n    def longestSubarray(self, nums: List[int], limit: int) -> int:\n        minheap, maxheap = [], []\n        heapify(minheap)\n        heapify(maxheap)\n\n        heappush(minheap, (nums[0], 0))\n        heappush(maxheap, (-nums[0], 0))\n        \n        res = 1\n        l, r = 0, 1\n        while r < len(nums):\n            num = nums[r]\n\n            heappush(minheap, (num, r))\n            heappush(maxheap, (-num, r))\n\n            while abs(minheap[0][0] - -maxheap[0][0]) > limit:\n                l = min(minheap[0][1], maxheap[0][1]) + 1\n\n                while minheap[0][1] < l:\n                    heappop(minheap)\n                while maxheap[0][1] < l:\n                    heappop(maxheap)\n\n            res = max(r - l + 1, res)\n            r += 1\n        \n        return res\n                \n\n\n\n\n\n        \n        return res\n\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit","has_notes":false,"flag_type":1}