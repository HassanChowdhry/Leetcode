{"id":1255475377,"question_id":17,"lang":"python3","lang_name":"Python3","time":"2 months, 1 week","timestamp":1715453142,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1255475377/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"16.6 MB","code":"class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits: return []\n        letters = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r', 's'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z'],\n        }\n        res = []\n        n = len(digits)\n\n        def backtrack(subset, idx):\n            if len(subset) == n:\n                string = ''.join(subset)\n                res.append(string)\n                return\n            \n            for letter in letters[digits[idx]]:\n                subset.append(letter)\n                backtrack(subset, idx+1)\n                subset.pop()\n        \n        backtrack([], 0)\n        return res","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}