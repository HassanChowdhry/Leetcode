{"id":1273075041,"question_id":120,"lang":"python3","lang_name":"Python3","time":"1 month, 2 weeks","timestamp":1717140736,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/1273075041/","is_pending":"Not Pending","title":"Triangle","memory":"20.1 MB","code":"class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        cache = {}\n        N = len(triangle)\n\n        def dfs(i, prev):\n            if i >= N:\n                return 0\n            if prev >= len(triangle[i]):\n                return 0\n            if (i, prev) in cache:\n                return cache[(i, prev)]\n            \n            left = triangle[i][prev] + dfs(i+1, prev)\n            right = triangle[i][prev] + dfs(i+1, prev+1)\n\n            take = min(left, right)\n            cache[(i, prev)] = take\n            return take\n        \n        return dfs(0, 0)","compare_result":"111111111111111111111111111111111111111111111","title_slug":"triangle","has_notes":false,"flag_type":1}