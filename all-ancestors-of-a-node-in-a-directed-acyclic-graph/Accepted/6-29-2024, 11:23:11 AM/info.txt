{"id":1304114311,"question_id":1431,"lang":"python3","lang_name":"Python3","time":"2 weeks, 5 days","timestamp":1719685391,"status":10,"status_display":"Accepted","runtime":"413 ms","url":"/submissions/detail/1304114311/","is_pending":"Not Pending","title":"All Ancestors of a Node in a Directed Acyclic Graph","memory":"48.1 MB","code":"from collections import deque\nclass Solution:\n    def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:\n        neighbors = [0 for _ in range(n)]\n        adj = [[] for _ in range(n)]\n        res = [[] for _ in range(n)]\n\n        for src, dest in edges:\n            neighbors[dest] += 1\n            adj[src].append(dest)\n        queue = deque()\n        for i, l in enumerate(neighbors):\n            if l == 0:\n                queue.append(i)\n        \n        topnum = []\n        while queue:\n            curr = queue.popleft()\n            topnum.append(curr)\n\n            neig = adj[curr]\n            for nm in neig:\n                neighbors[nm]-=1\n                if neighbors[nm] == 0:\n                    queue.append(nm)\n\n        unique = [set() for _ in range(n)]\n\n        for num in topnum:\n            for nm in adj[num]:\n                unique[nm].add(num)\n                unique[nm].update(unique[num])\n        \n        for i in range(n):\n            res[i] += list(unique[i])\n            res[i].sort()\n        \n        return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"all-ancestors-of-a-node-in-a-directed-acyclic-graph","has_notes":false,"flag_type":1}