{"id":1252845641,"question_id":40,"lang":"python3","lang_name":"Python3","time":"2 months, 1 week","timestamp":1715189494,"status":10,"status_display":"Accepted","runtime":"74 ms","url":"/submissions/detail/1252845641/","is_pending":"Not Pending","title":"Combination Sum II","memory":"16.6 MB","code":"class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        # init\n        nums = sorted(candidates)\n        n = len(nums)\n        res = []\n\n        # backtrack - keep track of tot n subset and append when total == target\n        def backtrack(subset, total, idx):\n            if total == target:\n                res.append(subset.copy())\n                return\n            if total > target or idx>=n:\n                return\n            \n            subset.append(nums[idx])\n            backtrack(subset, total+nums[idx], idx+1)\n            subset.pop()\n\n            while idx+1 < n and nums[idx]==nums[idx+1]:\n                idx+=1\n\n            backtrack(subset, total, idx+1)\n        \n        \n        backtrack([], 0, 0)\n        return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}