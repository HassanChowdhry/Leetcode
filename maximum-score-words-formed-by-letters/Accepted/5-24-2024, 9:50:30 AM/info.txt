{"id":1266815478,"question_id":1381,"lang":"python3","lang_name":"Python3","time":"1 month, 3 weeks","timestamp":1716569430,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/1266815478/","is_pending":"Not Pending","title":"Maximum Score Words Formed by Letters","memory":"16.5 MB","code":"class Solution:\n    def maxScoreWords(self, words: List[str], letters: List[str], score: List[int]) -> int:\n        N = len(words)\n\n        mx = []\n        freq = [0 for i in range(26)]\n        subset = [0 for i in range(26)]\n        for c in letters:\n            freq[ord(c) - 97] += 1\n\n        def is_valid_word(subset):\n            for c in range(26):\n                if freq[c] < subset[c]:\n                    return False\n            \n            return True\n        \n        def backtrack(n, words, score, subset, sc):\n            if n == -1:\n                mx.append(sc)\n                return\n           \n            backtrack(n - 1, words, score, subset, sc)\n\n            L = len(words[n])\n            for i in range(L):\n                c = ord(words[n][i]) - 97\n                subset[c] += 1\n                sc += score[c]\n\n            if is_valid_word(subset):\n                backtrack(n - 1, words, score, subset, sc)\n                \n            for i in range(L):\n                c = ord(words[n][i]) - 97\n                subset[c] -= 1\n                sc -= score[c]\n\n        backtrack(N - 1, words, score, subset, 0)\n\n        return max(mx)","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-words-formed-by-letters","has_notes":false,"flag_type":1}