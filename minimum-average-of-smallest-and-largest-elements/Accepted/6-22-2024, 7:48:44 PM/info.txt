{"id":1297258090,"question_id":3471,"lang":"python3","lang_name":"Python3","time":"3Â weeks, 4Â days","timestamp":1719110924,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/1297258090/","is_pending":"Not Pending","title":"Minimum Average of Smallest and Largest Elements","memory":"16.4 MB","code":"from heapq import heapify, heappush, heappop\nclass Solution:\n    def minimumAverage(self, nums: List[int]) -> float:\n        minheap, maxheap = [], []\n        heapify(minheap)\n        heapify(maxheap)\n        \n        for num in nums:\n            heappush(minheap, num)\n            heappush(maxheap, -num)\n        \n        N = int(len(nums) /2)\n        res = [0] * N\n        i = 0\n        while minheap and maxheap and i < N:\n            maxx = -heappop(maxheap)\n            minn = heappop(minheap)\n            res[i] = ((maxx + minn)/2)\n            i+=1\n            \n        \n        \n        \n        return min(res)","compare_resulttitle_slug":"minimum-average-of-smallest-and-largest-elements","has_notes":false,"flag_type":1}