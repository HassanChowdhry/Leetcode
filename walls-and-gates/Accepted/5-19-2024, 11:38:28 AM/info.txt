{"id":1262480132,"question_id":286,"lang":"python3","lang_name":"Python3","time":"2Â months","timestamp":1716143908,"status":10,"status_display":"Accepted","runtime":"210 ms","url":"/submissions/detail/1262480132/","is_pending":"Not Pending","title":"Walls and Gates","memory":"19.6 MB","code":"from collections import deque\nclass Solution:\n    def wallsAndGates(self, rooms: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        queue = deque()\n        row = len(rooms)\n        col = len(rooms[0])\n\n        for i in range(row):\n            for j in range(col):\n                if rooms[i][j] == 0:\n                    queue.append((i, j))\n\n        def bfs():            \n            mins = 1\n            while queue:\n                size = len(queue)\n                \n                for i in range(size):\n                    x, y = queue.popleft()\n                \n                    for r, c in [(x, y + 1), (x + 1, y), (x - 1, y), (x, y - 1)]:\n                        if r in range(row) and c in range(col) and rooms[r][c]>0 and rooms[r][c]>mins:\n                            queue.append((r, c))\n                            rooms[r][c] = min(mins, rooms[r][c])    \n                mins+=1\n        bfs()\n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates","has_notes":false,"flag_type":1}