{"id":1266861526,"question_id":684,"lang":"python3","lang_name":"Python3","time":"1Â month, 3Â weeks","timestamp":1716573066,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/1266861526/","is_pending":"Not Pending","title":"Redundant Connection","memory":"17.1 MB","code":"# REPEAT - UNION FIND\nclass Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        N = len(edges)\n        parent = [i for i in range(N+1)]\n        rank = [1 for i in range(N+1)]\n\n        def find(n):\n            p = parent[n]\n            while p != parent[p]:\n                parent[p] = parent[parent[p]]\n                p = parent[p]\n            \n            return p\n\n        def union(e1, e2):\n            p1, p2 = find(e1), find(e2)\n\n            if p1 == p2:\n                return False\n            \n\n            if rank[p1] > rank[p2]:\n                parent[p2] = p1\n                rank[p1] += rank[p2]\n            else:\n                parent[p1] = p2\n                rank[p2] += rank[p1]\n        \n            return True\n        \n        for e1, e2 in edges:\n            if not union(e1, e2):\n                return [e1, e2]","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false,"flag_type":1}