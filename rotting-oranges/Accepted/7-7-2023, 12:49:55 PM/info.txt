{"id":988839980,"question_id":1036,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1688759395,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/988839980/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"16.4 MB","code":"class Solution:\n  def orangesRotting(self, grid: list[list[int]]) -> int:\n    # declare\n    minutes = 0\n    isPossible = True\n    queue = deque()\n      \n    for i in range(len(grid)):\n      for j in range(len(grid[i])):\n        if grid[i][j] == 2:\n          queue.append((i, j))\n\n    def bfs() -> int:\n      mins = 0\n      \n      while queue:\n        size = len(queue)\n        \n        temp = 0\n        for i in range(size):\n          x, y = queue.popleft()\n          \n          for r, c in [(x, y + 1), (x + 1, y), (x - 1, y), (x, y - 1)]:\n            if r in range(len(grid)) and c in range(len(grid[x])) and grid[r][c] == 1:\n              queue.append((r, c))\n              grid[r][c] = 2\n              temp = 1\n        \n        mins += temp\n      return mins\n    \n    minutes += bfs()\n    \n    for i in range(len(grid)):\n      for j in range(len(grid[i])):\n        if grid[i][j] == 1:\n          isPossible = False    \n          \n    # return\n    return -1 if not isPossible else minutes","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}