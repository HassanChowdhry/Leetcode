{"id":1297348397,"question_id":3464,"lang":"python3","lang_name":"Python3","time":"3 weeks, 4 days","timestamp":1719114514,"status":10,"status_display":"Accepted","runtime":"658 ms","url":"/submissions/detail/1297348397/","is_pending":"Not Pending","title":"Maximize Total Cost of Alternating Subarrays","memory":"43.2 MB","code":"class Solution:\n    def maximumTotalCost(self, nums: List[int]) -> int:\n        dp = [[float(\"-inf\"), float(\"-inf\")] for _ in range(len(nums))]\n        dp[0][0] = nums[0]\n        dp[0][1] = float(\"-inf\")\n        \n        for i in range(1, len(nums)):\n            dp[i][0] = max(dp[i-1][0] + nums[i], dp[i-1][1] + nums[i])\n            dp[i][1] = dp[i-1][0] - nums[i]\n        \n        \n        return max(dp[-1])","compare_resulttitle_slug":"maximize-total-cost-of-alternating-subarrays","has_notes":false,"flag_type":1}