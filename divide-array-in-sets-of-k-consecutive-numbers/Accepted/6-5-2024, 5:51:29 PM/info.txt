{"id":1278967076,"question_id":1422,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1717635089,"status":10,"status_display":"Accepted","runtime":"208 ms","url":"/submissions/detail/1278967076/","is_pending":"Not Pending","title":"Divide Array in Sets of K Consecutive Numbers","memory":"56.8 MB","code":"// #pragma GCC optimize(\"O3,unroll-loops\")\nint speedup = []{ios::sync_with_stdio(0); cin.tie(0); return 0;}();\n\nclass Solution {\npublic:\n    bool isPossibleDivide(vector<int>& nums, int k) {\n        int N = nums.size();\n        if (N % k) return false;\n        if (k == 1) return true;\n        \n        std::priority_queue<int> minheap;\n        std::map<int, int> frq;\n\n        for (int num: nums) {\n            if (!frq.contains(num)) {\n                frq[num] = 0;\n                minheap.push(num);\n            }\n            frq[num] += 1;\n        }\n        \n        while (minheap.size()) {\n            int peek = minheap.top();\n\n            for (int i = peek; i >= abs(peek-k+1); --i) {\n                if (!frq.contains(i)) {\n                    return false;\n                } \n                frq[i]-=1;\n                if (frq[i] == 0) {\n                    frq.erase(i);\n                    if (i == minheap.top()) minheap.pop();\n                }\n            }\n        }\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"divide-array-in-sets-of-k-consecutive-numbers","has_notes":false,"flag_type":1}