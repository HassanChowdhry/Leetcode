{"id":1236921480,"question_id":907,"lang":"python3","lang_name":"Python3","time":"2 months, 4 weeks","timestamp":1713566051,"status":10,"status_display":"Accepted","runtime":"236 ms","url":"/submissions/detail/1236921480/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"18.1 MB","code":"class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        leng = len(piles)\n        largest = max(piles)\n\n        if leng == 1: return ceil(piles[0]/h)\n\n        if leng == h: return largest\n        # hours = [i+1 for i in range(largest)]\n        \n        def is_consumed(k):\n            hours = 0\n            for num in piles:\n                hours += ceil(num/k)\n\n            return hours <= h\n\n        start, end = 1, largest\n        min_k = largest\n\n        while start < end:\n            k = ((start + end) // 2)\n            is_good = is_consumed(k)\n\n            if is_good:\n                min_k = k\n                end = k\n            else:\n                start = k+1\n\n        return min_k","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1}