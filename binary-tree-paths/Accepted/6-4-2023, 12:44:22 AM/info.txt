{"id":963532021,"question_id":257,"lang":"python3","lang_name":"Python3","time":"1 year, 1 month","timestamp":1685864662,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/963532021/","is_pending":"Not Pending","title":"Binary Tree Paths","memory":"16.5 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isLeaf(self, root: Optional[TreeNode]):\n      return not root.left and not root.right\n    \n    def dfs(self, root: Optional[TreeNode], res: list, path: str):\n      path += (\"->\" + str(root.val))\n      if self.isLeaf(root):\n        res.append(path)\n\n      if root.left:\n        self.dfs(root.left, res, path)\n      if root.right:\n        self.dfs(root.right, res, path) \n      \n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n      res = []\n      \n      if not root: \n        return res\n      \n      path = str(root.val)\n      if self.isLeaf(root):\n        res.append(path)\n              \n      if root.left:\n        self.dfs(root.left, res, path)\n      if root.right:\n        self.dfs(root.right, res, path)\n\n      return res","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-paths","has_notes":false,"flag_type":1}