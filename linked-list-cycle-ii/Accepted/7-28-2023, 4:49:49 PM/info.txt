{"id":1006518557,"question_id":142,"lang":"python3","lang_name":"Python3","time":"11 months, 3 weeks","timestamp":1690588189,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1006518557/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"20.2 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n      slow = head\n      fast = head\n      \n      while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        \n        if slow == fast:\n            slow = head\n            while slow is not fast:\n                slow = slow.next\n                fast = fast.next\n            return slow\n\n      return None","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}