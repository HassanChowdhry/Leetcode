{"id":1246920668,"question_id":199,"lang":"python3","lang_name":"Python3","time":"2 months, 2 weeks","timestamp":1714603533,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1246920668/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"16.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        # do dfs\n        # keep track of level using param, res array appends if not present \n        # traversal goes left then right so last update is rightmost\n        res = []\n        \n        if not root:\n            return res\n        \n        def dfs(root, level):\n            if not root:\n                return\n            \n            if level > len(res)-1:\n                res.append(root.val)\n            else:\n                res[level] = root.val\n            print(res)\n            dfs(root.left, level+1)\n            dfs(root.right, level+1)\n\n        \n\n\n        \n        level = 0\n        dfs(root, level)\n        return res","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false,"flag_type":1}