{"id":669835034,"question_id":1584,"lang":"javascript","lang_name":"JavaScript","time":"2 years, 3 months","timestamp":1648578393,"status":10,"status_display":"Accepted","runtime":"89 ms","url":"/submissions/detail/669835034/","is_pending":"Not Pending","title":"Average Salary Excluding the Minimum and Maximum Salary","memory":"44.5 MB","code":"/* eslint-disable no-bitwise */\n/* eslint-disable no-underscore-dangle */\nconst top = 0;\nconst parent = (i) => ((i + 1) >>> 1) - 1;\nconst left = (i) => (i << 1) + 1;\nconst right = (i) => (i + 1) << 1;\n\nclass PriorityQueue {\n  constructor(comparator = (a, b) => a > b) {\n    this._heap = [];\n    this._comparator = comparator;\n  }\n\n  size() {\n    return this._heap.length;\n  }\n\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  peek() {\n    return this._heap[top];\n  }\n\n  push(...values) {\n    values.forEach((value) => {\n      this._heap.push(value);\n      this._siftUp();\n    });\n    return this.size();\n  }\n\n  pop() {\n    const poppedValue = this.peek();\n    const bottom = this.size() - 1;\n    if (bottom > top) {\n      this._swap(top, bottom);\n    }\n    this._heap.pop();\n    this._siftDown();\n    return poppedValue;\n  }\n\n  replace(value) {\n    const replacedValue = this.peek();\n    this._heap[top] = value;\n    this._siftDown();\n    return replacedValue;\n  }\n\n  _greater(i, j) {\n    return this._comparator(this._heap[i], this._heap[j]);\n  }\n\n  _swap(i, j) {\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\n  }\n\n  _siftUp() {\n    let node = this.size() - 1;\n    while (node > top && this._greater(node, parent(node))) {\n      this._swap(node, parent(node));\n      node = parent(node);\n    }\n  }\n\n  _siftDown() {\n    let node = top;\n    while (\n      (left(node) < this.size() && this._greater(left(node), node))\n      || (right(node) < this.size() && this._greater(right(node), node))\n    ) {\n      let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);\n      this._swap(node, maxChild);\n      node = maxChild;\n    }\n  }\n}\n\nmodule.exports = PriorityQueue;\n\n/**\n * @param {number[]} salary\n * @return {number}\n */\nvar average = function(salary) {\n   let pQueue = new PriorityQueue();\n  let totalSalary = 0;\n  let numOfEmployees = salary.length - 2;\n\n  for (let i = 0; i < salary.length; i++) {\n    pQueue.push(salary[i]);\n  }\n  pQueue.pop();\n\n  while (pQueue.size() > 1) {\n    totalSalary += pQueue.pop();\n  }\n  \n  let avg = (totalSalary / numOfEmployees);\n  return avg;\n}\n","compare_result":"1111111111111111111111111111111111111111111","title_slug":"average-salary-excluding-the-minimum-and-maximum-salary","has_notes":false,"flag_type":1}