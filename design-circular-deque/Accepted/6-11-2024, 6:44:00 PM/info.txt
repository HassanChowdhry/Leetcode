{"id":1285441054,"question_id":859,"lang":"python3","lang_name":"Python3","time":"1Â month","timestamp":1718156640,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/1285441054/","is_pending":"Not Pending","title":"Design Circular Deque","memory":"17.6 MB","code":"class Node:\n    def __init__(self, val, nxt=None, prev=None):\n        self.val = val\n        self.next = nxt\n        self.prev = prev\n\nclass LL:\n\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.len = 0\n    \n    def length(self) -> int:\n        return self.len\n    \n    def isEmpty(self) -> int:\n        return self.len == 0\n\n    def get(self, index: int) -> int:\n        curr, end = self.head, self.tail\n        if not curr or index >= self.len:\n            return -1\n\n        for i in range(index):\n            curr = curr.next\n        \n        return curr.val\n        \n\n    def addAtHead(self, val: int) -> None:\n        self.len += 1\n        if not self.head:\n            self.head = Node(val)\n            self.tail = self.head\n            return\n            \n        new_node = Node(val, self.head)\n        self.head.prev = new_node\n        self.head = new_node\n        \n\n    def addAtTail(self, val: int) -> None:\n        self.len += 1\n        if not self.tail:\n            self.head = Node(val)\n            self.tail = self.head\n            return\n\n        new_node = Node(val, None, self.tail)\n        self.tail.next = new_node\n        self.tail = new_node\n        \n\n    def addAtIndex(self, index: int, val: int) -> None:\n        if index > self.len:\n            return\n\n        if index == 0:\n            self.addAtHead(val)\n            return\n        if index == self.len:\n            self.addAtTail(val)\n            return\n        \n        \n        curr = self.head\n        for i in range(index-1):\n            curr = curr.next\n        \n        nxt = curr.next\n        new_node = Node(val, nxt, curr)\n        curr.next = new_node\n        nxt.prev = new_node\n        self.len += 1\n        \n    def deleteAtIndex(self, index: int) -> None:\n        if index >= self.len:\n            return\n\n        if index == 0:\n            self.head = self.head.next\n            if self.head:\n                self.head.prev = None\n            if not self.head:\n                self.tail = None\n            self.len -= 1\n            return\n        if index == self.len-1:\n            self.tail = self.tail.prev\n            if self.tail:\n                self.tail.next = None\n            if not self.tail:\n                self.head = None\n            self.len -= 1\n            return\n\n        curr = self.head\n        for i in range(index-1):\n            curr = curr.next\n        \n        nxt = curr.next.next\n        curr.next = nxt\n        nxt.prev = curr\n        self.len -= 1\n    \n    def getTail(self) -> int:\n        if not self.tail:\n            return -1\n        return self.tail.val\n    def getHead(self) -> int:\n        if not self.head:\n            return -1\n        return self.head.val\n\nclass MyCircularDeque:\n\n    def __init__(self, k: int):\n        self.list = LL()\n        self.max_len = k\n        \n    def insertFront(self, value: int) -> bool:\n        if self.isFull():\n            return False\n\n        self.list.addAtHead(value)\n        return True\n        \n\n    def insertLast(self, value: int) -> bool:\n        if self.isFull():\n            return False\n        self.list.addAtTail(value)\n        return True\n\n    def deleteFront(self) -> bool:\n        if self.isEmpty():\n            return False\n        self.list.deleteAtIndex(0)\n        return True\n        \n    def deleteLast(self) -> bool:\n        if self.isEmpty():\n            return False\n        self.list.deleteAtIndex(self.list.length()-1)\n        return True\n\n    def getFront(self) -> int:\n        return self.list.getHead()\n\n    def getRear(self) -> int:\n        return self.list.getTail()\n\n    def isEmpty(self) -> bool:\n        return self.list.isEmpty()\n\n    def isFull(self) -> bool:\n        return self.max_len == self.list.length()\n\n\n# Your MyCircularDeque object will be instantiated and called as such:\n# obj = MyCircularDeque(k)\n# param_1 = obj.insertFront(value)\n# param_2 = obj.insertLast(value)\n# param_3 = obj.deleteFront()\n# param_4 = obj.deleteLast()\n# param_5 = obj.getFront()\n# param_6 = obj.getRear()\n# param_7 = obj.isEmpty()\n# param_8 = obj.isFull()","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"design-circular-deque","has_notes":false,"flag_type":1}