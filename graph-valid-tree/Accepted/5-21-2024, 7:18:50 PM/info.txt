{"id":1264482313,"question_id":261,"lang":"python3","lang_name":"Python3","time":"1Â month, 3Â weeks","timestamp":1716344330,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/1264482313/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"18.7 MB","code":"class Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        if not edges and n==1:\n            return True\n        elif not edges and n>1:\n            return False\n\n        edges_map = {i:[] for i in range(n)}\n        for edge1, edge2 in edges:\n            edges_map[edge1].append(edge2)\n            edges_map[edge2].append(edge1)\n\n        visit = set()\n        def dfs(i, prev):\n            if i in visit:\n                return False\n            \n            visit.add(i)\n            \n            children = edges_map[i]\n            for child in children:\n                if child == prev:\n                    continue\n                if not dfs(child, i):\n                    return False\n            \n            return True\n\n        return dfs(0, -1) and len(visit)==n","compare_result":"111111111111111111111111111111111111111111111","title_slug":"graph-valid-tree","has_notes":false,"flag_type":1}