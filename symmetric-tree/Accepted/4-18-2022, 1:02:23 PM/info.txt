{"id":683015299,"question_id":101,"lang":"javascript","lang_name":"JavaScript","time":"2 years, 3 months","timestamp":1650312143,"status":10,"status_display":"Accepted","runtime":"90 ms","url":"/submissions/detail/683015299/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isSymmetric = function(root) {\n   if (!root) {\n    return true;\n  }\n  let queue = [root.left, root.right];\n\n  while (queue.length > 0) {\n\n    let size = queue.length;\n    let half = Math.floor(size / 2);\n  \n    for (let i = 0; i < half; i++) {\n      let left = queue[i];\n      let right = queue[size - i - 1];\n\n      if (!left && !right) {\n        continue;\n      }\n\n      if (!left || !right) {\n        return false;\n      }\n\n      if (left.val !== right.val) {\n        return false;\n      }\n    }\n\n    while (size > 0) {\n      let node = queue.shift();\n\n      if (node) {\n        queue.push(node.left);\n        queue.push(node.right);\n      }\n      size--;\n    }\n  }\n  return true;\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}