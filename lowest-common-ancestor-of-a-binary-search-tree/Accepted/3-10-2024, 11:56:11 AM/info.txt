{"id":1199868752,"question_id":235,"lang":"python3","lang_name":"Python3","time":"4 months, 1 week","timestamp":1710096971,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/1199868752/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"20.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        big, small = max(p.val, q.val), min(q.val, p.val)\n        curr_val = root.val\n\n        val_in_root = curr_val == big or curr_val == small\n        root_between_val = curr_val < big and curr_val > small\n\n        if val_in_root or root_between_val:\n            return root\n\n        return (\n            self.lowestCommonAncestor(root.left, p, q) \n            if curr_val > big\n            else self.lowestCommonAncestor(root.right, p, q)\n        )","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}