{"id":718359605,"question_id":111,"lang":"javascript","lang_name":"JavaScript","time":"2 years, 1 month","timestamp":1654803357,"status":10,"status_display":"Accepted","runtime":"318 ms","url":"/submissions/detail/718359605/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"98.8 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function(root) {\n    let queue = [];\n  queue.push(root);\n  \n  let minimumDepth = 0;\n  while (queue.length > 0) {\n    let size = queue.length;\n    minimumDepth += 1;\n\n    for (let i = 0; i < size; i++) {\n      let node = queue.shift();  \n      if (!node) {\n        return 0;\n      }\n      if (!node.left && !node.right) {\n        return minimumDepth;\n      }\n      if (node.left) {\n        queue.push(node.left);\n      }\n      if (node.right) {\n        queue.push(node.right);\n      }\n    }\n  }\n  return minimumDepth;\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree","has_notes":false,"flag_type":1}