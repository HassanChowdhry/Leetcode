{"id":999489351,"question_id":110,"lang":"python3","lang_name":"Python3","time":"12Â months","timestamp":1689870212,"status":10,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/999489351/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"21.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n      if not root:\n        return True\n      \n      def dfs(root, isBalanced):\n        if not root:\n          return 0\n        \n        left = dfs(root.left, isBalanced)\n        right = dfs(root.right, isBalanced)\n        \n        isBalanced[0] &= (abs(left - right) <= 1)\n        return 1 + max(left, right)\n      \n      isBalanced = [True]\n      dfs(root, isBalanced)\n      return isBalanced[0]","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}