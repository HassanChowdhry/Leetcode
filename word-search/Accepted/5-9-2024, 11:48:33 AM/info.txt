{"id":1253846003,"question_id":79,"lang":"python3","lang_name":"Python3","time":"2 months, 1 week","timestamp":1715280513,"status":10,"status_display":"Accepted","runtime":"4352 ms","url":"/submissions/detail/1253846003/","is_pending":"Not Pending","title":"Word Search","memory":"16.7 MB","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        rows = len(board)\n        col = len(board[0])\n        def backtrack(curr, idx, i, j, visited):\n            if i < 0 or j < 0 or i>=rows or j>=col:\n                return False\n            if (i, j) in visited or board[i][j] != word[idx]:\n                return False\n            \n            curr += word[idx]\n            visited.add((i, j))\n            if curr == word:\n                return True\n            \n            boolWord = False\n            \n            boolWord = boolWord or backtrack(curr, idx+1, i-1, j, visited)\n            boolWord = boolWord or backtrack(curr, idx+1, i+1, j, visited)\n            boolWord = boolWord or backtrack(curr, idx+1, i, j-1, visited)\n            boolWord = boolWord or backtrack(curr, idx+1, i, j+1, visited)\n            \n            if not boolWord:\n                visited.remove((i, j))\n\n            return boolWord\n        \n        isWordInBoard = False\n        for i in range(rows):\n            for j in range(col):\n                if board[i][j]==word[0]:\n                    visited = set()\n                    isWordInBoard = backtrack(\"\", 0, i, j, visited)\n                    if isWordInBoard: return True\n\n        return isWordInBoard","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}