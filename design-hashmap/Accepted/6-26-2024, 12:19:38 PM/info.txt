{"id":1301249902,"question_id":817,"lang":"python3","lang_name":"Python3","time":"3Â weeks","timestamp":1719429578,"status":10,"status_display":"Accepted","runtime":"185 ms","url":"/submissions/detail/1301249902/","is_pending":"Not Pending","title":"Design HashMap","memory":"19.6 MB","code":"class ListNode:\n    def __init__(self, key=-1, val=-1, next=None):\n        self.key = key\n        self.val = val\n        self.next = next\n\nclass MyHashMap:\n    def __init__(self):\n        self.map = [ListNode() for _ in range(1000)]\n\n    def put(self, key: int, value: int) -> None:\n        # cur = self.map[self.hashcode(key)]\n        idx = key % len(self.map)\n        node = self.map[idx]\n\n        while node.next:\n            if node.next.key == key:\n                node.next.val = value\n                return\n            node = node.next\n        node.next = ListNode(key, value)\n         \n    def get(self, key: int) -> int:\n        # cur = self.map[self.hashcode(key)].next\n        idx = key % len(self.map)\n        node = self.map[idx].next\n        while node and node.key != key:\n            node = node.next\n        if node:\n            return node.val\n        return -1\n\n    def remove(self, key: int) -> None:\n        # cur = self.map[self.hashcode(key)]\n        idx = key % len(self.map)\n\n        node = self.map[idx]\n        while node.next and node.next.key != key:\n            node = node.next\n        if node and node.next:\n            node.next = node.next.next\n","compare_result":"1111111111111111111111111111111111111","title_slug":"design-hashmap","has_notes":false,"flag_type":1}