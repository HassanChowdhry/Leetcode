{"id":1301247942,"question_id":817,"lang":"python3","lang_name":"Python3","time":"3Â weeks","timestamp":1719429430,"status":10,"status_display":"Accepted","runtime":"175 ms","url":"/submissions/detail/1301247942/","is_pending":"Not Pending","title":"Design HashMap","memory":"19.8 MB","code":"class ListNode:\n    def __init__(self, key=-1, val=-1, next=None):\n        self.key = key\n        self.val = val\n        self.next = next\n\nclass MyHashMap:\n    def __init__(self):\n        self.map = [ListNode() for i in range(1000)]\n        \n    def hashcode(self, key):\n        return key % len(self.map)\n\n    def put(self, key: int, value: int) -> None:\n        cur = self.map[self.hashcode(key)]\n        while cur.next:\n            if cur.next.key == key:\n                cur.next.val = value\n                return\n            cur = cur.next\n        cur.next = ListNode(key, value)\n         \n    def get(self, key: int) -> int:\n        cur = self.map[self.hashcode(key)].next\n        while cur and cur.key != key:\n            cur = cur.next\n        if cur:\n            return cur.val\n        return -1\n\n    def remove(self, key: int) -> None:\n        cur = self.map[self.hashcode(key)]\n        while cur.next and cur.next.key != key:\n            cur = cur.next\n        if cur and cur.next:\n            cur.next = cur.next.next\n","compare_result":"1111111111111111111111111111111111111","title_slug":"design-hashmap","has_notes":false,"flag_type":1}