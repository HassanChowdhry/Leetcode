{"id":1214050304,"question_id":46,"lang":"python3","lang_name":"Python3","time":"3 months, 3 weeks","timestamp":1711426109,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1214050304/","is_pending":"Not Pending","title":"Permutations","memory":"16.9 MB","code":"class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        # define vars\n        res_len = len(nums)\n        res = []\n\n        # backtracl: add all leading untill res_len\n        def backtrack(inner, curr_index):\n            # max len permute needs to be\n            if len(inner) == res_len:\n                res.append(inner.copy())\n                return\n            \n            for i in range(curr_index, curr_index+res_len):\n                # we dont get off track\n                index = i%res_len\n\n                #if its not alr in\n                if nums[index] in inner:\n                    continue\n\n                inner.append(nums[index])\n                backtrack(inner, index+1)\n                inner.pop()\n        \n        \n        # call func\n        backtrack([], 0)\n        return res\n","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1}