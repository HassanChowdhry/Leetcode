{"id":1242739063,"question_id":143,"lang":"python3","lang_name":"Python3","time":"2 months, 3 weeks","timestamp":1714158281,"status":10,"status_display":"Accepted","runtime":"59 ms","url":"/submissions/detail/1242739063/","is_pending":"Not Pending","title":"Reorder List","memory":"24.8 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        \"\"\"\n        size = 1\n        stack = []\n\n        # find size of ll and set pointers to end and middle\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            size += 2\n        \n        if fast.next:\n            fast = fast.next\n            size += 1\n\n        if size <= 2:\n            return\n        \n        temp = slow\n        slow = slow.next\n        temp.next = None\n        while slow:\n            temp = slow\n            stack.append(slow)\n            slow = slow.next\n            temp.next = None\n\n\n        left = head \n        while len(stack) >= 0:\n            right = stack.pop()\n            temp = left.next\n            left.next = right\n            right.next = temp\n            left = temp\n            \n            if len(stack) == 0:\n                break\n","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false,"flag_type":1}