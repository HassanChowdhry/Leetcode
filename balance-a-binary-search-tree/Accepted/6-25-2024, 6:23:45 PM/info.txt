{"id":1300362964,"question_id":1285,"lang":"python3","lang_name":"Python3","time":"3 weeks, 1 day","timestamp":1719365025,"status":10,"status_display":"Accepted","runtime":"197 ms","url":"/submissions/detail/1300362964/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"21.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        nums = []\n        def dfs(root):\n            if not root: return\n            dfs(root.left)\n            nums.append(root.val)\n            dfs(root.right)\n        dfs(root)\n\n        if len(nums)<=2:\n            return root\n        \n        def createBST(root, l, r):\n            if l > r:\n                return None\n            mid = (r + l) // 2\n            \n            root = TreeNode(nums[mid])\n            root.left = createBST(None, l, mid-1)\n            root.right = createBST(None, mid+1, r)\n\n            return root\n        \n        r = len(nums)-1\n        l = 0\n        new_root = createBST(None, l, r)\n        return new_root\n\n","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false,"flag_type":1}