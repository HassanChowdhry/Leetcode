{"id":988058162,"question_id":133,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1688671508,"status":10,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/988058162/","is_pending":"Not Pending","title":"Clone Graph","memory":"16.9 MB","code":"# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\nclass Solution:\n    def cloneGraph(self, node: Node) -> Node:\n      if not node:\n        return None\n      \n      visited = {}\n      \n      def bfs() -> Node:\n        queue = deque()\n        queue.append(node)\n        \n        while len(queue) > 0:\n          curr:Node = queue.popleft()\n                    \n          if curr in visited:\n            clone = visited[curr]\n          else:\n            clone = Node(curr.val)\n            visited[curr] = clone\n        \n          \n          for edge in curr.neighbors:\n            if edge in visited:\n              clone.neighbors.append(visited[edge])\n            else:\n              value = Node(edge.val)\n              visited[edge] = value\n              clone.neighbors.append(value)\n              queue.append(edge)\n            \n        return visited[node]\n      \n      return bfs()","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}