{"id":1316757532,"question_id":297,"lang":"python3","lang_name":"Python3","time":"1 week, 1 day","timestamp":1720635768,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/1316757532/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"20.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nfrom collections import deque\nclass Codec:\n\n    def serialize(self, root):\n        ans = []\n        empty = \"ø\"\n\n        def dfs(root):\n            if not root:\n                ans.append(empty)\n                return root\n            \n            ans.append(str(root.val))\n            dfs(root.left)\n            dfs(root.right)\n            return root\n\n        dfs(root)\n        return 'µ'.join(ans)\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        tree = deque(data.split(\"µ\"))\n        root = TreeNode()\n        empty = \"ø\"\n\n        def create(tree):\n            if tree[0] == empty:\n                tree.popleft()\n                return None\n\n            root = TreeNode(tree.popleft())        \n            root.left = create(tree)\n            root.right= create(tree)\n\n            return root\n        return create(tree)\n\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}