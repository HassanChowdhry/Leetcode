{"id":669690665,"question_id":1463,"lang":"javascript","lang_name":"JavaScript","time":"2 years, 3 months","timestamp":1648563897,"status":10,"status_display":"Accepted","runtime":"95 ms","url":"/submissions/detail/669690665/","is_pending":"Not Pending","title":"The K Weakest Rows in a Matrix","memory":"44.3 MB","code":"/**\n * \n * @param {number[][]} mat \n * @param {number} k\n * @returns {number[]} \n */\n// Time O(n), Space O(n)\nfunction kWeakestRows2(mat, k) {\n  let pQueue = new PriorityQueue((a, b) => (a[1] === b[1] ? a[0] < b[0] : a[1] < b[1]));\n  let result = [];\n\n  for (let i = 0; i < mat.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < mat[i].length; j++) {\n      if (mat[i][j] === 0) {\n        break;\n      }\n      sum++;\n    }\n    pQueue.push([i, sum]);\n  }\n\n  while (k > 0) {\n    result.push(pQueue.pop()[0]);\n    k--;\n  }\n\n  return result;\n}\n\n/**\n ** Time O(logN), Space O(1)\n * @param {Any[]} array \n * @returns \n */\nfunction binSearch(array) {\n  \n  let start = 0;\n  let end = array.length - 1;\n  let soldiers = 0;\n\n  while (start <= end) {\n    let middle = Math.floor((start + end) / 2);\n\n    if (array[middle] === 1) {\n      soldiers = middle + 1;\n      start = middle + 1;\n\n    } else {\n      end = middle - 1;   \n    }\n\n  }\n  return soldiers;\n}\n\n/**\n ** Time O(nlogn), Space O(n)\n * @param {number[][]} mat \n * @param {number} k\n * @returns {number[]} \n */\nfunction kWeakestRows(mat, k) {\n  let res = [];\n  \n  for (let i = 0; i < mat.length; i++) {\n    res.push([i, binSearch(mat[i])]);\n  }\n\n  res = res\n    .sort((a, b) => (a[1] === b[1] ? a[0] - b[0] : a[1] - b[1]))\n    .slice(0, k)\n    .map((item) => item[0]);\n\n  return res;\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"the-k-weakest-rows-in-a-matrix","has_notes":false,"flag_type":1}