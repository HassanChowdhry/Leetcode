{"id":1268199320,"question_id":768,"lang":"python3","lang_name":"Python3","time":"1Â month, 3Â weeks","timestamp":1716700560,"status":10,"status_display":"Accepted","runtime":"70 ms","url":"/submissions/detail/1268199320/","is_pending":"Not Pending","title":"Partition Labels","memory":"16.5 MB","code":"from collections import defaultdict\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        intervals = []\n        \n        n = len(s)\n        chars = set(s)\n        mp = defaultdict(lambda: [None] * 2)\n\n        for c in chars:\n            for i in range(n):\n                if s[i]==c:\n                    mp[c][0] = i\n                    break\n            \n            for i in range(n-1,-1,-1):\n                if s[i]==c:\n                    mp[c][1] = i\n                    break\n        \n        for key in mp:\n            value = mp[key]\n            intervals.append(value)\n        \n        def merge(intervals: List[List[int]]) -> List[List[int]]:\n\n            intervals = sorted(intervals, key=lambda x: x[0])\n            \n            res = [intervals[0]]\n            i = 0\n            j = 1\n            n = len(intervals)\n\n            while j<n:\n                if res[i][1] < intervals[j][0]:\n                    res.append(intervals[j])\n                    i+=1\n                    j+=1\n                    continue\n                \n                start = res[i][0]\n                end = max(res[i][1], intervals[j][1])\n                res[i][0] = start\n                res[i][1] = end\n                j+=1\n            \n            return res\n        \n        intervals = merge(intervals)\n        return [end+1-start for start, end in intervals]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-labels","has_notes":false,"flag_type":1}