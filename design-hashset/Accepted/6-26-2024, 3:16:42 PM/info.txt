{"id":1301348210,"question_id":816,"lang":"python3","lang_name":"Python3","time":"3Â weeks","timestamp":1719440202,"status":10,"status_display":"Accepted","runtime":"178 ms","url":"/submissions/detail/1301348210/","is_pending":"Not Pending","title":"Design HashSet","memory":"22.4 MB","code":"class ListNode:\n    def __init__(self, val=-1, next=None):\n        # self.key = key\n        self.val = val\n        self.next = next\nclass MyHashSet:\n\n    def __init__(self):\n        self.set = [ListNode() for _ in range(10000)]\n    \n    def hash(self, key) -> int:\n        return key % len(self.set)\n\n    def add(self, key: int) -> None:\n        idx = self.hash(key)\n        node = self.set[idx]\n\n        while node.next:\n            if node.next.val == key:\n                return\n            node = node.next\n        node.next = ListNode(key)\n        \n\n    def remove(self, key: int) -> None:\n        idx = self.hash(key)\n        node = self.set[idx]\n\n        while node.next:\n            if node.next.val == key:\n                node.next = node.next.next\n                return\n            node = node.next\n        \n\n    def contains(self, key: int) -> bool:\n        idx = self.hash(key)\n        node = self.set[idx].next\n\n        while node:\n            if node.val == key:\n                return True\n            node = node.next\n        return False\n        \n\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)","compare_result":"111111111111111111111111111111111","title_slug":"design-hashset","has_notes":false,"flag_type":1}