{"id":1265972706,"question_id":253,"lang":"python3","lang_name":"Python3","time":"1Â month, 3Â weeks","timestamp":1716484010,"status":10,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/1265972706/","is_pending":"Not Pending","title":"Meeting Rooms II","memory":"19.8 MB","code":"from heapq import heapify, heappop, heappush\nclass Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n        minheap = []\n        heapify(minheap)\n\n        arr = sorted(intervals)\n        res = 0\n\n        for start,end in arr:\n            if len(minheap)==0:\n                heappush(minheap, (end, 1))\n                res = 1\n                continue\n            \n            peek = minheap[0][0]\n            if start >= peek:\n                pair = heappop(minheap)\n                heappush(minheap, (end,pair[1]))\n                continue\n            \n            if start < peek:\n                res += 1\n                heappush(minheap, (end, res))\n            \n        return res","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"meeting-rooms-ii","has_notes":false,"flag_type":1}