{"id":998414039,"question_id":49,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1689767413,"status":10,"status_display":"Accepted","runtime":"106 ms","url":"/submissions/detail/998414039/","is_pending":"Not Pending","title":"Group Anagrams","memory":"19.9 MB","code":"# https://leetcode.com/problems/group-anagrams/\n\nclass Solution(object):\n    # Time O(nmlogm), Space O(n)\n    def groupAnagrams(self, strs: list[str]) -> list[list[str]]:\n      # declare\n      anagramMap = {}\n      \n      # appends to a key that is sorted version of anagram\n      for str in strs:\n        sortedStr = ''.join(sorted(str))\n        if sortedStr in anagramMap:\n          anagramMap[sortedStr].append(str)\n        else:\n          anagramMap[sortedStr] = [str]\n        \n      # return all arrays in map\n      return anagramMap.values()","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false,"flag_type":1}