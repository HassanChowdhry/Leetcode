{"id":630931203,"question_id":226,"lang":"javascript","lang_name":"JavaScript","time":"2 years, 5 months","timestamp":1643549693,"status":10,"status_display":"Accepted","runtime":"117 ms","url":"/submissions/detail/630931203/","is_pending":"Not Pending","title":"Invert Binary Tree","memory":"42.2 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function(root) {\n    let queue = [];\n  queue.push(root);\n\n  while (queue.length > 0) {\n    let size = queue.length;\n\n    for (let i = 0; i < size; i++) {\n      let node = queue.shift();\n      if (!node) {\n        return root;\n      }\n      if (node.left && !node.right) {\n        queue.push(node.left);\n        node.right = node.left;\n        node.left = null;\n\n      } else if (!node.left && node.right) {\n        queue.push(node.right);\n        node.left = node.right;\n        node.right = null;\n\n      } else {\n        let temp = node.left;\n        if (node.left) {\n          queue.push(node.left);\n          node.left = node.right;\n        }\n\n        if (node.right) {\n          queue.push(node.right);\n          node.right = temp;\n        }\n      }\n    }\n  }\n  return root;\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"invert-binary-tree","has_notes":false,"flag_type":1}